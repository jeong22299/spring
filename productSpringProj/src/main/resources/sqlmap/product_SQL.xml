<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일은 여러개일 수 있으므로 이를 구분하기 위한 식별 용도로 사용 -->
<mapper namespace="product">
	<!-- PRODUCT 테이블에 insert -->
	<insert id="insert" parameterType="productVO">
	<!-- BEFORE : INSERT 문을 실행하기 전에 수행
		AFTER : INSERT 문을 실행한 후에 실행 -->
		<selectKey order="BEFORE" keyProperty="productId" resultType="String">
			SELECT SUBSTR(MAX(PRODUCT_ID),0,1)
		  	   || TRIM(SUBSTR(MAX(PRODUCT_ID),2)+1) PRODUCT_ID
			FROM   PRODUCT
		</selectKey>
		INSERT INTO
			PRODUCT(PRODUCT_ID, PNAME, UNIT_PRICE, DESCRIPTION, MANUFACTURER,
			CATEGORY, UNITS_IN_STOCK, CONDITION)
		VALUES(#{productId},
			#{pname}, #{unitPrice}, #{description}, #{manufacturer}, #{category},
			#{unitsInStock}, #{condition})
	</insert>

	<!-- 상품 목록 -->
	<select id="list" resultType="productVO" parameterType="String">
		SELECT 	P.PRODUCT_ID
		, P.PNAME, UNIT_PRICE
		, P.DESCRIPTION
		, P.MANUFACTURER
		, P.CATEGORY
		, P.UNITS_IN_STOCK
		, P.CONDITION
		, (SELECT A.ATTACH_NAME FROM ATTACH A
		        WHERE P.PRODUCT_ID = A.TID
		        AND A.SEQ = 1) FILENAME
		FROM PRODUCT P
		WHERE	1 = 1
		<if test="keyword!=null and keyword!=''">
			AND	(P.PNAME LIKE '%' || #{keyword} || '%' 
			OR  P.CATEGORY LIKE '%' || #{keyword} || '%')
		</if>
		ORDER BY P.PNAME DESC
	</select>
	
	<select id="detail" parameterType="productVO" resultType="productVO">
		SELECT P.PRODUCT_ID
		     , P.PNAME
		     , P.UNIT_PRICE
		     , P.DESCRIPTION
		     , P.MANUFACTURER
		     , P.CATEGORY
		     , P.UNITS_IN_STOCK
		     , P.CONDITION
		     , (SELECT A.ATTACH_NAME FROM ATTACH A
		        WHERE P.PRODUCT_ID = A.TID
		        AND A.SEQ = 1) FILENAME
		FROM  PRODUCT P
		WHERE P.PRODUCT_ID = #{productId}
	</select>

	<update id="update" parameterType="productVO">
		UPDATE PRODUCT
		SET PNAME =
		#{pname}, UNIT_PRICE = #{unitPrice}, DESCRIPTION = #{description},
		MANUFACTURER = #{manufacturer}, CATEGORY = #{category}, UNITS_IN_STOCK = #{unitsInStock},
		CONDITION = #{condition}, FILENAME = #{filename}
		WHERE PRODUCT_ID = #{productId}
	</update>

	<delete id="delete" parameterType="String">
		DELETE FROM PRODUCT
		WHERE
		PRODUCT_ID = #{productId}
	</delete>
	
	<!-- CART 및 CART 테이블에 INSERT 
		드루와 : CartVO
		가즈아 : 생략(insert/update/delete는 resultType="int"를 생략
	-->
	<insert id="insertCart">
		INSERT INTO CART(CART_ID, NAME, SHIPPING_DATE, COUNTRY, ZIP_CODE
					   , ADDRESS_NAME, ADDRESS_DETAIL, REGIST_DT)
		VALUES(#{cartId}, #{name}, #{shippingDate}, #{country}, #{zipCode}
			 , #{addressName}, #{addressDetail}, SYSDATE)
	</insert>
	
	<!-- ATTACH 테이블에 INSERT
	드루와 : List<AttachVO>
	가즈아 : 생략
	 -->
	 <update id="insertAttach" parameterType="java.util.List">
	 	<foreach collection="list" item="attachVO" open="INSERT ALL " close="SELECT * FROM SYS.DUAL"
	 			 separator=" ">
			INTO ATTACH VALUES(#{attachVO.seq}, #{attachVO.tid}, #{attachVO.attachName}, #{attachVO.attachSize}, #{attachVO.attachType}, SYSDATE)
	 	</foreach>
	 </update>
	 
	 <!--  PRODUCT 테이블의 기본키 자동생성 -->
	 <select id="getProductId" resultType="String">
		SELECT SUBSTR(MAX(PRODUCT_ID),0,1)
		     || TRIM(SUBSTR(MAX(PRODUCT_ID),2)+1) PRODUCT_ID
		FROM   PRODUCT
    </select>
</mapper>






















